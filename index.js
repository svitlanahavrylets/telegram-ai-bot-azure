// import axios from "axios";
// import dotenv from "dotenv";
// import dayjs from "dayjs";
// import { Telegraf, session, Markup } from "telegraf";
// import systemPrompt from "./prompt.js";

const axios = require("axios");
const dotenv = require("dotenv");
const dayjs = require("dayjs");
const { Telegraf, session, Markup } = require("telegraf");
const systemPrompt = require("./prompt.js");

dotenv.config();

process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason);
});
process.on("uncaughtException", (err) => {
  console.error("Uncaught Exception thrown:", err);
});

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

bot.use(session());

console.log("Starting bot...");

function isWorkingHours() {
  const now = dayjs();
  const hour = now.hour();
  return hour >= 10 && hour < 18;
}

async function getWorkingStatus() {
  try {
    const response = await axios.get(
      "https://hook.eu2.make.com/5s4seh193zi2jw95lht18hrxggipbp4r"
    );

    const data = response.data;

    const manualOverride = String(data.manualOverride).toLowerCase() === "true";
    const isOpen = String(data.isOpen).toLowerCase() === "true";

    return { manualOverride, isOpen };
  } catch (err) {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫:", err);
    // –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ ‚Äî –≤–≤–∞–∂–∞—î–º–æ —â–æ –º–∞–π—Å—Ç–µ—Ä –ø—Ä–∞—Ü—é—î, –∞–±–∏ –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
    return { manualOverride: false, isOpen: true };
  }
}

async function getServiceContent(columnName) {
  try {
    const response = await axios.get(
      "https://hook.eu2.make.com/5s4seh193zi2jw95lht18hrxggipbp4r"
    );
    return response.data[columnName] || "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö.";
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å–ª—É–≥:", error);
    return "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ—Å–ª—É–≥.";
  }
}

async function sendDataToGoogleSheets(data) {
  try {
    await axios.post(
      "https://hook.eu2.make.com/08ktt9547kxpdk4lng9rcd4bdmbtmahg",
      data
    );
    console.log("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ:", data);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Google –¢–∞–±–ª–∏—Ü—é:", error);
  }
}

bot.start(async (ctx) => {
  ctx.session = { step: "start", data: {} };
  await ctx.reply(
    "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫ –º–∞–π—Å—Ç—Ä–∞ –∑ —Ä–µ–º–æ–Ω—Ç—É –Ω–æ—É—Ç–±—É–∫—ñ–≤. –û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –æ–ø—Ü—ñ—é:",
    Markup.keyboard([
      ["üõ†Ô∏è –¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"],
      ["üíª –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞"],
      ["üõí –ö—É–ø—ñ–≤–ª—è / –ü—Ä–æ–¥–∞–∂ –Ω–æ—É—Ç–±—É–∫—ñ–≤ —Ç–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á–∏—Ö"],
    ]).resize()
  );
});

bot.hears("üõ†Ô∏è –¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", async (ctx) => {
  ctx.session.selectedCategory = "–¢–µ—Ö–Ω—ñ—á–Ω–µ_–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è";
  const content = await getServiceContent("–¢–µ—Ö–Ω—ñ—á–Ω–µ_–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è");
  await ctx.reply(content);
  await askForNextStep(ctx);
});

bot.hears("üíª –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞", async (ctx) => {
  ctx.session.selectedCategory = "–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞_—Å–∏—Å—Ç–µ–º–∞";
  const content = await getServiceContent("–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞_—Å–∏—Å—Ç–µ–º–∞");
  await ctx.reply(content);
  await askForNextStep(ctx);
});

bot.hears("üõí –ö—É–ø—ñ–≤–ª—è / –ü—Ä–æ–¥–∞–∂ –Ω–æ—É—Ç–±—É–∫—ñ–≤ —Ç–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á–∏—Ö", async (ctx) => {
  ctx.session.selectedCategory = "–ö—É–ø—ñ–≤–ª—è_–ü—Ä–æ–¥–∞–∂";
  const content = await getServiceContent("–ö—É–ø—ñ–≤–ª—è_–ü—Ä–æ–¥–∞–∂");
  await ctx.reply(content);
  await askForNextStep(ctx);
});

async function askForNextStep(ctx) {
  if (ctx.session?.step && ctx.session.step !== "start") {
    return ctx.reply("–°–ø–µ—Ä—à—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è üôè");
  }

  const { manualOverride, isOpen } = await getWorkingStatus();
  const isWithinWorkingHours = isWorkingHours();

  const isWorking = manualOverride ? isOpen : isWithinWorkingHours;

  console.log("manualOverride:", manualOverride);
  console.log("isOpen:", isOpen);
  console.log("isWithinWorkingHours:", isWithinWorkingHours);
  console.log("‚Üí isWorking:", isWorking);

  if (isWorking) {
    await ctx.reply(
      "–Ø–∫—â–æ –≤–∏ –æ–±—Ä–∞–ª–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –∑ –ø–µ—Ä–µ–ª—ñ–∫—É –∞–±–æ —è–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–∞–≤—ñ—Ç–∞–π—Ç–µ –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ:\nüìç –ö–∏—ó–≤, –≤—É–ª. –£—à–∏–Ω—Å—å–∫–æ–≥–æ, 4\nüìû +380930000000"
    );
  } else {
    ctx.session.step = "collect_name";
    await ctx.reply("–ü–æ—á–∏–Ω–∞—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è!", {
      reply_markup: { remove_keyboard: true },
    });
    await ctx.reply(
      "–ù–∞—Ä–∞–∑—ñ –º–∞–π—Å—Ç–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î. –î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏ –ø—ñ–∑–Ω—ñ—à–µ."
    );
    await ctx.reply("(1/3) –Ø–∫ –º–æ–∂–Ω–∞ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?");
  }
}

bot.on("text", async (ctx) => {
  const text = ctx.message.text;
  const session = ctx.session;

  if (!session.step || session.step === "start") {
    // AI –ø–æ—Ä–∞–¥–∞ —â–æ–¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (—Ç–≤—ñ–π —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥)
    const aiCategory = await getAIResponse(
      `–ö–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: "${text}". –Ø–∫—É –∑ —Ç—Ä—å–æ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ü–µ –Ω–∞–π–±—ñ–ª—å—à–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è: "–¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", "–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞" —á–∏ "–ö—É–ø—ñ–≤–ª—è / –ü—Ä–æ–¥–∞–∂"? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∏—à–µ –æ–¥–Ω—ñ—î—é –∑ —Ü–∏—Ö –Ω–∞–∑–≤.`
    );
    const normalized = aiCategory.toLowerCase();
    if (normalized.includes("—Ç–µ—Ö–Ω—ñ—á–Ω–µ"))
      return bot.emit("hears", ctx, "üõ†Ô∏è –¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è");
    if (normalized.includes("–æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞"))
      return bot.emit("hears", ctx, "üíª –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞");
    if (normalized.includes("–∫—É–ø—ñ–≤–ª—è") || normalized.includes("–ø—Ä–æ–¥–∞–∂"))
      return bot.emit(
        "hears",
        ctx,
        "üõí –ö—É–ø—ñ–≤–ª—è / –ü—Ä–æ–¥–∞–∂ –Ω–æ—É—Ç–±—É–∫—ñ–≤ —Ç–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á–∏—Ö"
      );
    return ctx.reply(
      "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –∞–±–æ —É—Ç–æ—á–Ω—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç."
    );
  }

  // –õ–æ–≥—ñ–∫–∞ –ø–æ–µ—Ç–∞–ø–Ω–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
  if (session.step === "collect_name") {
    session.data.name = text.trim();
    session.step = "collect_phone";
    return ctx.reply("(2/3) –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:");
  }

  if (session.step === "collect_phone") {
    session.data.phone = text.trim();
    session.step = "collect_problem";
    session.problemAttempts = 0;
    return ctx.reply(
      "(3/3) –û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∑ –Ω–æ—É—Ç–±—É–∫–æ–º, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏—Ä—ñ—à–∏—Ç–∏:"
    );
  }

  if (session.step === "collect_problem") {
    if (!session.problemAttempts) session.problemAttempts = 0;
    session.tempProblem = text.trim();

    // AI –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ç–µ–º–∞—Ç–∏—Ü—ñ
    const aiReply = await getAIResponse(
      `–ö–ª—ñ—î–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤: "${session.tempProblem}". –ß–∏ —Ü–µ —Å—Ö–æ–∂–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç, –ø–æ–≤'—è–∑–∞–Ω–∏–π —ñ–∑ —Ä–µ–º–æ–Ω—Ç–æ–º, –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è–º –∞–±–æ –ø–æ–∫—É–ø–∫–æ—é/–ø—Ä–æ–¥–∞–∂–µ–º –Ω–æ—É—Ç–±—É–∫–∞ —á–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á–∏—Ö?
  –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –æ–ø–∏—Å –∫–æ—Ä–æ—Ç–∫–∏–π –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏/—Å—É—Ä–∂–∏–∫, –∞–ª–µ —Å—É—Ç—å –∑—Ä–æ–∑—É–º—ñ–ª–∞ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π "–¢–∞–∫". 
  –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–±—ñ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å–ª—ñ–≤ –∞–±–æ —â–æ—Å—å –±–µ–∑–≥–ª—É–∑–¥–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "—Ö*–π", "–ª–æ—Ä–ø–æ—Ä–ø"), –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π "–ù—ñ". 
  –í—ñ–¥–ø–æ–≤—ñ–¥—å –ª–∏—à–µ: "–¢–∞–∫" –∞–±–æ "–ù—ñ".`
    );

    const isValid = aiReply.toLowerCase().includes("—Ç–∞–∫");

    if (!isValid) {
      session.problemAttempts++;

      if (session.problemAttempts === 1) {
        return ctx.reply(
          "ü§® –ì–º... –¶–µ –∑–≤—É—á–∏—Ç—å –Ω–µ –∑–æ–≤—Å—ñ–º —è–∫ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞. –ú–æ–∂–ª–∏–≤–æ, —Å–ø—Ä–æ–±—É—î—Ç–µ —â–µ —Ä–∞–∑ –æ–ø–∏—Å–∞—Ç–∏, —â–æ —Å–∞–º–µ –Ω–µ –ø—Ä–∞—Ü—é—î –∞–±–æ —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?"
        );
      } else {
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–≤—ñ—Ç—å –¥—É—Ä–Ω–∏—Ü—é, –∞–ª–µ —á–µ—Å–Ω–æ –∫–∞–∂–µ–º–æ
        session.data.problem = session.tempProblem;
        await sendDataToGoogleSheets(session.data);
        ctx.session = null;
        return ctx.reply(
          "–ù—É —â–æ –∂, –ø—Ä–∏–π–¥–µ—Ç—å—Å—è –º–∞–π—Å—Ç—Ä—É —Ç–∞–∫ —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ ü§∑‚Äç‚ôÇÔ∏è –í—ñ–Ω –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —É –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ä–æ–±–æ—á–∏–π —á–∞—Å. –ó–∞–∑–≤–∏—á–∞–π –º–∏ –ø—Ä–∞—Ü—é—î–º–æ —â–æ–¥–Ω—è –∑ 10:00 –¥–æ 18:00."
        );
      }
    }

    // –Ø–∫—â–æ –≤—Å–µ –æ–∫ ‚Äî –¥—Ä—É–≥–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ?
    const aiCheckDetails = await getAIResponse(
      `–ö–ª—ñ—î–Ω—Ç –æ–ø–∏—Å–∞–≤ –ø—Ä–æ–±–ª–µ–º—É: ${session.tempProblem}. –ß–∏ —Ü–µ –≤–∏–≥–ª—è–¥–∞—î —è–∫ –∞–¥–µ–∫–≤–∞—Ç–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∑–∞–ø–∏—Ç, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∫–æ—Ä–æ—Ç–∫–∏–π?
  –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "–ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ windows", "–ø–æ—á–∏—Å—Ç–∏—Ç–∏ –Ω–æ—É—Ç–±—É–∫", "–Ω–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è" ‚Äî —Ü–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ.
  –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∏—à–µ: "–¢–∞–∫" –∞–±–æ "–ù—ñ".`
    );

    if (aiCheckDetails.toLowerCase().includes("–Ω—ñ")) {
      session.problemAttempts++;
      if (session.problemAttempts < 2) {
        return ctx.reply(
          "–¢–∞–∫–∏–π –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ –Ω–µ –¥—É–∂–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É. –ú–æ–∂–ª–∏–≤–æ, –æ–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑—É–π—Ç–µ —Å–∏–º–ø—Ç–æ–º–∏? –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        );
      } else {
        session.data.problem = session.tempProblem;
        await sendDataToGoogleSheets(session.data);
        ctx.session = null;
        return ctx.reply(
          "–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ —É –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ä–æ–±–æ—á–∏–π —á–∞—Å. –ó–∞–∑–≤–∏—á–∞–π –º–∏ –ø—Ä–∞—Ü—é—î–º–æ —â–æ–¥–Ω—è –∑ 10:00 –¥–æ 18:00."
        );
      }
    } else {
      session.data.problem = session.tempProblem;
      await sendDataToGoogleSheets(session.data);

      await ctx.reply(
        "–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ —É –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ä–æ–±–æ—á–∏–π —á–∞—Å. –ó–∞–∑–≤–∏—á–∞–π –º–∏ –ø—Ä–∞—Ü—é—î–º–æ —â–æ–¥–Ω—è –∑ 10:00 –¥–æ 18:00."
      );
      await ctx.reply("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é.", {
        reply_markup: {
          keyboard: [["üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
      ctx.session = null;
    }
  }
});

async function getAIResponse(userInput) {
  try {
    const response = await axios.post(
      "https://api.deepinfra.com/v1/inference/meta-llama/Meta-Llama-3-8B-Instruct",
      {
        input: `<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n\n${systemPrompt}<|eot_id|><|start_header_id|>user<|end_header_id|>\n\n${userInput}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n`,
        stop: ["<|eot_id|>"],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.DEEPINFRA_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    return (
      response.data.results?.[0]?.generated_text?.trim() ||
      "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    );
  } catch (error) {
    console.error("DeepInfra error:", error.response?.data || error.message);
    return "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI. –ê–ª–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!";
  }
}

console.log("Using API key:", process.env.DEEPINFRA_API_KEY ? "YES" : "NO");

bot.launch();

const express = require("express");
const app = express();

app.get("/", (req, res) => {
  res.send("–ë–æ—Ç –ø—Ä–∞—Ü—é—î üëç");
});

const PORT = process.env.PORT || 7000;
app.listen(PORT, () => {
  console.log(`Express —Å–µ—Ä–≤–µ—Ä —Å–ª—É—Ö–∞—î –ø–æ—Ä—Ç ${PORT}`);
});
